#!/bin/bash
docker-compose up -d zookeeper broker

docker-compose exec broker kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic block_data

docker-compose up -d --build schema-registry connect control-center ksqldb-server ksqldb-cli ksql-datagen rest-proxy db

echo "Starting ksql containers..."
sleep 3m # we should wait a little bit

# create streams
curl -X "POST" "http://localhost:8088/ksql" \
     -H "Content-Type: application/vnd.ksql.v1+json; charset=utf-8" \
     -d $'{
  "ksql": "CREATE STREAM block_data ( block VARCHAR, extrinsics ARRAY < VARCHAR >, events ARRAY < VARCHAR > ) WITH ( kafka_topic = \'block_data\', value_format = \'JSON\'); CREATE STREAM BLOCK (NUMBER integer, HASH string, STATE_ROOT string, EXTRINSICS_ROOT string, PARENT_HASH string, DIGEST string, CREATE_TIME BIGINT) WITH (KAFKA_TOPIC=\'BLOCK\', PARTITIONS=1, REPLICAS=1, VALUE_FORMAT=\'AVRO\'); INSERT INTO BLOCK SELECT CAST(EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.number\') AS INTEGER) NUMBER, EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.hash\') HASH, EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.stateRoot\') STATE_ROOT, EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.extrinsicsRoot\') EXTRINSICS_ROOT, EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.parentHash\') PARENT_HASH, EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.digest\') DIGEST, CAST(EXTRACTJSONFIELD(BLOCK_DATA.EXTRINSICS[1], \'$.method.args.now\') AS BIGINT) CREATE_TIME FROM BLOCK_DATA BLOCK_DATA EMIT CHANGES; create stream extrinsic with (PARTITIONS = 1, VALUE_FORMAT = \'AVRO\') as SELECT cast( extractjsonfield(block, \'$.header.number\') as integer ) as block_number, explode(extrinsics) as extrinsic from block_data EMIT CHANGES; create stream event (block_number integer, event string) with ( kafka_topic = \'EVENT\', PARTITIONS = 1, VALUE_FORMAT = \'AVRO\', REPLICAS = 1 ); INSERT INTO event SELECT cast( extractjsonfield(block, \'$.header.number\') as integer ) as block_number, explode(events) as event from block_data EMIT CHANGES; CREATE TABLE profit_events_filter_rules (method varchar(30)) WITH ( KAFKA_TOPIC = \'profit_events_filter_rules\', VALUE_FORMAT = \'JSON\', KEY = \'METHOD\', PARTITIONS = 1, REPLICAS = 1 ); INSERT INTO profit_events_filter_rules (method) VALUES (\'Reward\'); INSERT INTO profit_events_filter_rules (method) VALUES (\'Deposit\'); CREATE STREAM profit_events_filter (block_number integer, event string) with ( kafka_topic = \'PROFIT_EVENTS_FILTER\', PARTITIONS = 1, VALUE_FORMAT = \'AVRO\', REPLICAS = 1 ); INSERT INTO profit_events_filter select E.block_number, E.event from EVENT E INNER JOIN PROFIT_EVENTS_FILTER_RULES P ON extractjsonfield(E.event, \'$.method\') = P.method WHERE extractjsonfield(E.event, \'$.section\') != \'treasury\' EMIT CHANGES; CREATE STREAM BALANCES (ROWKEY INTEGER KEY, BLOCK_NUMBER INTEGER, CREATE_TIME BIGINT, METHOD string, ACCOUNT_ID string, BALANCE BIGINT) WITH (KEY=\'BLOCK_NUMBER\', KAFKA_TOPIC=\'BALANCES\', PARTITIONS=1, REPLICAS=1, VALUE_FORMAT=\'AVRO\'); INSERT INTO BALANCES SELECT PROFIT_EVENTS_FILTER.BLOCK_NUMBER BLOCK_NUMBER, BLOCK.CREATE_TIME CREATE_TIME, EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, \'$.method\') METHOD, EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, \'$.data.AccountId\') ACCOUNT_ID, CAST(EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, \'$.data.Balance\') AS BIGINT) BALANCE FROM PROFIT_EVENTS_FILTER PROFIT_EVENTS_FILTER INNER JOIN BLOCK BLOCK WITHIN 5 HOURS ON ((BLOCK.NUMBER = PROFIT_EVENTS_FILTER.BLOCK_NUMBER)) EMIT CHANGES; CREATE STREAM BALANCES_WITH_IS_VALIDATOR WITH ( KAFKA_TOPIC = \'BALANCES_WITH_IS_VALIDATOR\', PARTITIONS = 1, REPLICAS = 1 ) AS SELECT BALANCES.BLOCK_NUMBER BLOCK_NUMBER, BALANCES.ACCOUNT_ID ACCOUNT_ID, BALANCES.BALANCE BALANCE, BALANCES.METHOD METHOD, IS_VALIDATOR( CAST(BLOCK_DATA.EXTRINSICS AS STRING), BALANCES.ACCOUNT_ID ) IS_VALIDATOR, BALANCES.CREATE_TIME CREATE_TIME FROM BALANCES BALANCES LEFT OUTER JOIN BLOCK_DATA BLOCK_DATA WITHIN 10000000 DAYS ON ( ( BALANCES.BLOCK_NUMBER = CAST( EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, \'$.header.number\') AS INTEGER ) ) ) EMIT CHANGES;",
  "streamsProperties": {}
}'

curl -X "POST" -H "Accept:application/json" -H "Content-Type: application/json" --data @connectors/block_sink.json http://localhost:8083/connectors
curl -X "POST" -H "Accept:application/json" -H "Content-Type: application/json" --data @connectors/event_sink.json http://localhost:8083/connectors
curl -X "POST" -H "Accept:application/json" -H "Content-Type: application/json" --data @connectors/extrinsic_sink.json http://localhost:8083/connectors
curl -X "POST" -H "Accept:application/json" -H "Content-Type: application/json" --data @connectors/balances_sink.json http://localhost:8083/connectors

docker-compose up -d --build streamer identity_enrichment