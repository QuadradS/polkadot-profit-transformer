{
  "create_block_data_stream": "CREATE STREAM block_data (\n    block VARCHAR,\n    extrinsics ARRAY < VARCHAR >,\n    events ARRAY < VARCHAR >\n) WITH (\n    kafka_topic = 'block_data', value_format = 'JSON');",
  "create_block_stream": "CREATE STREAM BLOCK (NUMBER integer, HASH string, STATE_ROOT string, EXTRINSICS_ROOT string, PARENT_HASH string, DIGEST string, CREATE_TIME BIGINT) WITH (KAFKA_TOPIC='BLOCK', PARTITIONS=1, REPLICAS=1, VALUE_FORMAT='AVRO');INSERT INTO BLOCK SELECT\n  CAST(EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.number') AS INTEGER) NUMBER,\n  EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.hash') HASH,\n  EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.stateRoot') STATE_ROOT,\n  EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.extrinsicsRoot') EXTRINSICS_ROOT,\n  EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.parentHash') PARENT_HASH,\n  EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.digest') DIGEST,\n  CAST(EXTRACTJSONFIELD(BLOCK_DATA.EXTRINSICS[1], '$.method.args.now') AS BIGINT) CREATE_TIME\nFROM BLOCK_DATA BLOCK_DATA\nEMIT CHANGES;",
  "create_event_stream": "create stream event (block_number integer, event string) with (\n    kafka_topic = 'EVENT',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\nINSERT INTO event\nSELECT cast(\n        extractjsonfield(block, '$.header.number') as integer\n    ) as block_number,\n    explode(events) as event\nfrom block_data EMIT CHANGES;",
  "create_extrinsic_stream": "create stream extrinsic with (PARTITIONS = 1, VALUE_FORMAT = 'AVRO') as\nSELECT cast(\n        extractjsonfield(block, '$.header.number') as integer\n    ) as block_number,\n    explode(extrinsics) as extrinsic\nfrom block_data EMIT CHANGES;",
  "create_profit_events_filter_rules": "CREATE TABLE profit_events_filter_rules (method varchar(30)) WITH (\n    KAFKA_TOPIC = 'profit_events_filter_rules',\n    VALUE_FORMAT = 'JSON',\n    KEY = 'METHOD',\n    PARTITIONS = 1,\n    REPLICAS = 1\n);\nINSERT INTO profit_events_filter_rules (method)\nVALUES ('Reward');\nINSERT INTO profit_events_filter_rules (method)\nVALUES ('Deposit');",
  "create_profit_events_filter_rules_stream": "CREATE STREAM profit_events_filter (block_number integer, event string) with (\n    kafka_topic = 'PROFIT_EVENTS_FILTER',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\nINSERT INTO profit_events_filter\nselect E.block_number,\n    E.event\nfrom EVENT E\n    INNER JOIN PROFIT_EVENTS_FILTER_RULES P ON extractjsonfield(E.event, '$.method') = P.method\nWHERE extractjsonfield(E.event, '$.section') != 'treasury' EMIT CHANGES;",
  "create_balances_stream": "CREATE STREAM BALANCES (ROWKEY INTEGER KEY, BLOCK_NUMBER INTEGER, CREATE_TIME BIGINT, METHOD string, ACCOUNT_ID string, BALANCE BIGINT) WITH (KEY='BLOCK_NUMBER', KAFKA_TOPIC='BALANCES', PARTITIONS=1, REPLICAS=1, VALUE_FORMAT='AVRO');\nINSERT INTO BALANCES SELECT\n  PROFIT_EVENTS_FILTER.BLOCK_NUMBER BLOCK_NUMBER,\n  BLOCK.CREATE_TIME CREATE_TIME,\n  EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, '$.method') METHOD,\n  EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, '$.data.AccountId') ACCOUNT_ID,\n  CAST(EXTRACTJSONFIELD(PROFIT_EVENTS_FILTER.EVENT, '$.data.Balance') AS BIGINT) BALANCE\nFROM PROFIT_EVENTS_FILTER PROFIT_EVENTS_FILTER\nINNER JOIN BLOCK BLOCK WITHIN 5 HOURS ON ((BLOCK.NUMBER = PROFIT_EVENTS_FILTER.BLOCK_NUMBER))\nEMIT CHANGES;",
  "create_balances_with_is_validator": "CREATE STREAM BALANCES_WITH_IS_VALIDATOR WITH (\n    KAFKA_TOPIC = 'BALANCES_WITH_IS_VALIDATOR',\n    PARTITIONS = 1,\n    REPLICAS = 1\n) AS\nSELECT BALANCES.BLOCK_NUMBER BLOCK_NUMBER,\n    BALANCES.ACCOUNT_ID ACCOUNT_ID,\n    BALANCES.BALANCE BALANCE,\n    BALANCES.METHOD METHOD,\n    IS_VALIDATOR(\n        CAST(BLOCK_DATA.EXTRINSICS AS STRING),\n        BALANCES.ACCOUNT_ID\n    ) IS_VALIDATOR,\n    BALANCES.CREATE_TIME CREATE_TIME\nFROM BALANCES BALANCES\n    LEFT OUTER JOIN BLOCK_DATA BLOCK_DATA WITHIN 10000000 DAYS ON (\n        (\n            BALANCES.BLOCK_NUMBER = CAST(\n                EXTRACTJSONFIELD(BLOCK_DATA.BLOCK, '$.header.number') AS INTEGER\n            )\n        )\n    ) EMIT CHANGES;"
}
