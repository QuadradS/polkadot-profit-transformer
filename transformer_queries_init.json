{
  "ksql": "CREATE STREAM block_data (\n    \"block\" VARCHAR,\n    \"extrinsics\" ARRAY < VARCHAR >,\n    \"events\" ARRAY < VARCHAR >,\n    \"block_time\" BIGINT\n) WITH (\n    kafka_topic = 'block_data',\n    value_format = 'JSON'\n);\n\n-- create_block_stream\n\nCREATE STREAM BLOCK (\n    \"id\" BIGINT,\n    \"hash\" STRING,\n    \"state_root\" STRING,\n    \"extrinsics_root\" STRING,\n    \"parent_hash\" STRING,\n    \"author\" STRING,\n    \"session_id\" INT,\n    \"era\" INT,\n    \"last_log\" STRING,\n    \"digest\" STRING,\n    \"block_time\" BIGINT\n) WITH (\n    KAFKA_TOPIC='BLOCK',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO BLOCK SELECT\n                      CAST(EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.number') AS BIGINT) \"id\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.hash') \"hash\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.stateRoot') \"state_root\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.extrinsicsRoot') \"extrinsics_root\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.parentHash') \"parent_hash\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.author') \"author\",\n                      CAST(EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.session_id') AS INT) \"session_id\",\n                      CAST(EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.era') AS INT) \"era\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.last_log') \"last_log\",\n                      EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.digest') \"digest\",\n                      BLOCK_DATA.\"block_time\" \"block_time\"\nFROM BLOCK_DATA BLOCK_DATA\nEMIT CHANGES;\n\n-- create_event_stream\n\nCREATE STREAM event (\n    \"block_id\" BIGINT,\n    \"session_id\" INT,\n    \"era\" INT,\n    \"event\" STRING\n) WITH (\n    kafka_topic = 'EVENT',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\n\nINSERT INTO event\nSELECT\n    CAST(extractjsonfield(BLOCK_DATA.\"block\", '$.header.number') AS BIGINT) AS \"block_id\",\n    CAST(EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.session_id') AS INT) \"session_id\",\n    CAST(EXTRACTJSONFIELD(BLOCK_DATA.\"block\", '$.header.era') AS INT) \"era\",\n    EXPLODE(BLOCK_DATA.\"events\") AS \"event\"\n\nFROM BLOCK_DATA BLOCK_DATA EMIT CHANGES;\n\n-- create_event_extraction\n\nCREATE STREAM EVENT_EXTRACTION (\n    \"id\" STRING,\n    \"block_id\" BIGINT,\n    \"session_id\" INT,\n    \"era\" INT,\n    \"section\" STRING,\n    \"method\" STRING,\n    \"data\" STRING,\n    \"event\" STRING\n) WITH (\n    KAFKA_TOPIC='EVENT_EXTRACTION',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO EVENT_EXTRACTION SELECT\n    extractjsonfield(E.\"event\", '$.id') \"id\",\n    E.\"block_id\" \"block_id\",\n    E.\"session_id\" \"session_id\",\n    E.\"era\" \"era\",\n    extractjsonfield(E.\"event\", '$.section') \"section\",\n    extractjsonfield(E.\"event\", '$.method') \"method\",\n    extractjsonfield(E.\"event\", '$.data') \"data\",\n    extractjsonfield(E.\"event\", '$.event') \"event\"\nFROM EVENT E\nEMIT CHANGES;\n\n-- create_extrinsic_stream\nCREATE STREAM extrinsic (\n    \"block_id\" BIGINT,\n    \"extrinsic\" STRING\n) WITH (\n    kafka_topic = 'EXTRINSIC',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\n\nINSERT INTO extrinsic\nSELECT\n    CAST(extractjsonfield(BLOCK_DATA.\"block\", '$.header.number') AS BIGINT) AS \"block_id\",\n    EXPLODE(BLOCK_DATA.\"extrinsics\") AS \"extrinsic\"\n\nFROM BLOCK_DATA BLOCK_DATA EMIT CHANGES;\n\n-- create_extrinsic_extraction\n\nCREATE STREAM EXTRINSIC_EXTRACTION (\n    \"id\" STRING,\n    \"block_id\" BIGINT,\n    \"section\" STRING,\n    \"method\" STRING,\n    \"ref_event_ids\" STRING,\n    \"extrinsic\" STRING\n) WITH (\n    KAFKA_TOPIC='EXTRINSIC_EXTRACTION',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO EXTRINSIC_EXTRACTION SELECT\n    extractjsonfield(E.\"extrinsic\", '$.id') \"id\",\n    E.\"block_id\" \"block_id\",\n    extractjsonfield(E.\"extrinsic\", '$.section') \"section\",\n    extractjsonfield(E.\"extrinsic\", '$.method') \"method\",\n    extractjsonfield(E.\"extrinsic\", '$.ref_event_ids') \"ref_event_ids\",\n    extractjsonfield(E.\"extrinsic\", '$.extrinsic')  \"extrinsic\"\nFROM EXTRINSIC E\nEMIT CHANGES;\n\n-- session data\n\nCREATE STREAM session_data (\n    \"session_id\" INT,\n    \"era\" INT,\n    \"block_end\" BIGINT,\n    \"validators\" ARRAY < VARCHAR >,\n    \"nominators\" ARRAY < VARCHAR >,\n    \"block_time\" BIGINT\n) WITH (\n    kafka_topic = 'session_data',\n    value_format = 'JSON'\n);\n\nCREATE STREAM SESSION_END (\n    \"id\" INT,\n    \"era\" INT,\n    \"block_end\" BIGINT,\n    \"block_time\" BIGINT\n) WITH (\n    KAFKA_TOPIC='SESSION_END',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO SESSION_END SELECT\n                      SESSION_DATA.\"session_id\" \"id\",\n                      SESSION_DATA.\"era\" \"era\",\n                      SESSION_DATA.\"block_end\" \"block_end\",\n                      (SESSION_DATA.\"block_time\" / 1000) \"block_time\"\nFROM SESSION_DATA SESSION_DATA\nEMIT CHANGES;\n\n-- staking_validator\n\nCREATE STREAM staking_validator (\n    \"session_id\" INT,\n    \"validator\" STRING\n) WITH (\n    kafka_topic = 'STAKING_VALIDATOR',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\n\nINSERT INTO staking_validator\nSELECT\n    SESSION_DATA.\"session_id\" \"session_id\",\n    EXPLODE(SESSION_DATA.\"validators\") AS \"validator\"\nFROM SESSION_DATA SESSION_DATA EMIT CHANGES;\n\nCREATE STREAM STAKING_VALIDATOR_EXTRACTION (\n    \"era\" INT,\n    \"account_id\" STRING,\n    \"is_enabled\" BOOLEAN,\n    \"total\" STRING,\n    \"own\" STRING,\n    \"reward_points\" INT,\n    \"reward_dest\" STRING,\n    \"reward_account_id\" STRING,\n    \"nominators_count\" INT,\n    \"prefs\" STRING,\n    \"block_time\" BIGINT\n) WITH (\n    KAFKA_TOPIC='STAKING_VALIDATOR_EXTRACTION',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO STAKING_VALIDATOR_EXTRACTION SELECT\n    CAST(extractjsonfield(E.\"validator\", '$.era') AS INT) \"era\",\n    extractjsonfield(E.\"validator\", '$.account_id') \"account_id\",\n    CAST(extractjsonfield(E.\"validator\", '$.is_enabled') AS BOOLEAN) \"is_enabled\",\n    extractjsonfield(E.\"validator\", '$.total') \"total\",\n    extractjsonfield(E.\"validator\", '$.own') \"own\",\n    CAST(extractjsonfield(E.\"validator\", '$.reward_points') AS INT) \"reward_points\",\n    extractjsonfield(E.\"validator\", '$.reward_dest') \"reward_dest\",\n    extractjsonfield(E.\"validator\", '$.reward_account_id') \"reward_account_id\",\n    CAST(extractjsonfield(E.\"validator\", '$.nominators_count') AS INT) \"nominators_count\",\n    extractjsonfield(E.\"validator\", '$.prefs') \"prefs\",\n    (CAST(extractjsonfield(E.\"validator\", '$.block_time') AS BIGINT) / 1000) \"block_time\"\nFROM STAKING_VALIDATOR E\nEMIT CHANGES;\n\n\nCREATE STREAM staking_nominator (\n    \"session_id\" INT,\n    \"nominator\" STRING\n) WITH (\n    kafka_topic = 'STAKING_NOMINATOR',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\n\nINSERT INTO staking_nominator\nSELECT\n    SESSION_DATA.\"session_id\" \"session_id\",\n    EXPLODE(SESSION_DATA.\"nominators\") AS \"nominator\"\nFROM SESSION_DATA SESSION_DATA EMIT CHANGES;\n\nCREATE STREAM STAKING_NOMINATOR_EXTRACTION (\n    \"era\" INT,\n    \"account_id\" STRING,\n    \"validator\" STRING,\n    \"is_enabled\" BOOLEAN,\n    \"is_clipped\" BOOLEAN,\n    \"value\" STRING,\n    \"reward_dest\" STRING,\n    \"reward_account_id\" STRING,\n    \"block_time\" BIGINT\n) WITH (\n    KAFKA_TOPIC='STAKING_NOMINATOR_EXTRACTION',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='AVRO'\n);\n\nINSERT INTO STAKING_NOMINATOR_EXTRACTION SELECT\n    CAST(extractjsonfield(E.\"nominator\", '$.era') AS INT) \"era\",\n    extractjsonfield(E.\"nominator\", '$.account_id') \"account_id\",\n    extractjsonfield(E.\"nominator\", '$.validator') \"validator\",\n    CAST(extractjsonfield(E.\"nominator\", '$.is_enabled') AS BOOLEAN) \"is_enabled\",\n    CAST(extractjsonfield(E.\"nominator\", '$.is_clipped') AS BOOLEAN) \"is_clipped\",\n    extractjsonfield(E.\"nominator\", '$.value') \"value\",\n    extractjsonfield(E.\"nominator\", '$.reward_dest') \"reward_dest\",\n    extractjsonfield(E.\"nominator\", '$.reward_account_id') \"reward_account_id\",\n    (CAST(extractjsonfield(E.\"nominator\", '$.block_time') AS BIGINT) / 1000) \"block_time\"\nFROM STAKING_NOMINATOR E\nEMIT CHANGES;\n\n\nCREATE STREAM ENRICHMENT_ACCOUNT_CHANGES (\n    \"event_id\" STRING,\n    \"account_id\" STRING,\n    \"event\" STRING,\n    \"block_id\" BIGINT\n) WITH (\n    KAFKA_TOPIC='ENRICHMENT_ACCOUNT_CHANGES',\n    PARTITIONS=1,\n    REPLICAS=1,\n    VALUE_FORMAT='JSON'\n);\n\nINSERT INTO ENRICHMENT_ACCOUNT_CHANGES SELECT\n    extractjsonfield(E.\"event\", '$.id') \"event_id\",\n    extractjsonfield(E.\"event\", '$.data[0].AccountId') \"account_id\",\n    extractjsonfield(E.\"event\", '$.method') \"event\",\n    E.\"block_id\" \"block_id\"\nFROM EVENT E\nWHERE\n    extractjsonfield(E.\"event\", '$.section') = 'system'\n    AND (\n            extractjsonfield(E.\"event\", '$.method') = 'NewAccount' OR\n            extractjsonfield(E.\"event\", '$.method') = 'KilledAccount'\n        )\nEMIT CHANGES;\n\n-- create_profit_events_filter_rules\n-- {\"ksql\":\"CREATE TABLE profit_events_filter_rules (method VARCHAR) WITH (kafka_topic='profit_events_filter_rules', value_format='JSON', KEY='method');\"}\nCREATE TABLE profit_events_filter_rules (method VARCHAR(30)) WITH (\n                                                                 KAFKA_TOPIC = 'profit_events_filter_rules',\n                                                                 VALUE_FORMAT = 'JSON',\n                                                                 KEY = 'method',\n                                                                 PARTITIONS = 1,\n                                                                 REPLICAS = 1\n                                                                 );\nINSERT INTO profit_events_filter_rules (method) VALUES ('Reward');\nINSERT INTO profit_events_filter_rules (method) VALUES ('Deposit');\n\n-- create_profit_events_filter_rules_stream\n\nCREATE STREAM profit_events_filter (\n    \"block_id\" BIGINT,\n    \"event\" STRING\n) WITH (\n    kafka_topic = 'PROFIT_EVENTS_FILTER',\n    PARTITIONS = 1,\n    VALUE_FORMAT = 'AVRO',\n    REPLICAS = 1\n);\n\nINSERT INTO profit_events_filter\nSELECT\n    E.\"block_id\" \"block_id\",\n    E.\"event\" \"event\"\nFROM EVENT E\n         INNER JOIN PROFIT_EVENTS_FILTER_RULES P ON extractjsonfield(E.\"event\", '$.method') = P.method\nWHERE extractjsonfield(E.\"event\", '$.section') != 'treasury'\nEMIT CHANGES;",
  "streamsProperties": {}
}